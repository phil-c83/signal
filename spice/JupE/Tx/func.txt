***** helper for complex calculus

* real and imaginary part for complex product z1*z2
.func ReMul(r1,x1,r2,x2)={r1*r2 - x1*x2}
.func ImMul(r1,x1,r2,x2)={r1*x2 + r2*x1}

* real and imaginary part for complex product z1*z2*z3
.func ReMul3(r1,x1,r2,x2,r3,x3)={ReMul(r1,x1,r2,x2)*r3 - ImMul(r1,x1,r2,x2)*x3}
.func ImMul3(r1,x1,r2,x2,r3,x3)={ReMul(r1,x1,r2,x2)*x3 + ImMul(r1,r2,x1,x2)*r3}

* real and imaginary part for complex division z1/z2  
.func ReDiv(r1,x1,r2,x2)={ReMul2(r1,x1,r2,-x2)/sqMod(r2,x2)}
.func ImDiv(r1,x1,r2,x2=={ImMul2(r1,x1,r2,-x2)/sqMod(r2,x2)}

* modulus
.func sqMod(r1,x1)={r1**2 + x1**2}
.func Mod(r1,x1)={sqrt(sqMod(r1,x1))}

* modulus for sums z1+z2, z1+z2+z3 
.func sqModSum(r1,x1,r2,x2)={sqMod(r1,x1) + sqMod(r2,x2) + 2*ReMul(r1,x1,r2,-x2)}
.func ModSum(r1,x1,r2,x2)={sqrt(sqModSum(r1,x1,r2,x2))}

* |Z1+Z2|^2 = |Z1|^2 + |Z2|^2 + 2*Re(Z1*conj(Z2))
* |Z1+Z2+Z3|^2 = |Z1+Z2|^2 + |Z3|^2 + 2*Re(Z1*conj(Z3)) + 2*Re(Z2*conj(Z3))
* Z1*conj(Z2) + Z2*conj(Z1) = 2*Re(Z1*conj(Z2))
.func sqModSum3(r1,x1,r2,x2,r3,x3)={sqModSum(r1,x1,r2,x2) + sqMod(r3,x3) + 2*ReMul(r1,x1,r3,-x3) + 2*ReMul(r2,x2,r3,-x3)}
.func ModSum3(r1,x1,r2,x2,r3,x3)={sqrt(sqModSum3(r1,x1,r2,x2,r3,x3))}

* modulus for product z1*z2
.func sqModMul(r1,x1,r2,x2)={ReMul(r1,x1,r2,x2)**2 + ImMul(r1,x1,r2,x2)**2}
.func ModMul(r1,x1,r2,x2)={sqrt(sqModMul(r1,x1,r2,x2))}

* conjugate
.func ReConj(r1,x1)={r1}
.func ImConj(r1,x1)={-x1}

* inverse
.func ReInv(r1,x1)={r1/sqMod(r1,x1)}
.func ImInv(r1,x1)={-x1/sqMod(r1,x1)}

* polar/cartesian conversion
.func C2Pmod(re,im)={sqrt(re**2+im**2)}
.func C2Parg(re,im)={atan(im/re)}
.func P2Cre(m,a)={m*cos(a)}
.func P2Cim(m,a)={m*sin(a)}


********* helper functions for Zp (ie clamp impedance Rp//Lp)
.func Eval_Rp(ModZ0,ArgZ0,R1,Fs)={(ModZ0**2+R1**2-2*ModZ0*R1*cos(ArgZ0))/(ModZ0*cos(ArgZ0)-R1)}
.func Eval_Lp(ModZ0,ArgZ0,R1,Fs)={(ModZ0**2+R1**2-2*ModZ0*R1*cos(ArgZ0))/(ModZ0*sin(ArgZ0)*2*pi*Fs)}
.func ReZp(Rp,Lp,Fs)={(2*pi*Lp*Fs)**2 * Rp/((2*pi*Lp*Fs)**2 + Rp**2)}
.func ImZp(Rp,Lp,Fs)={(2*pi*Lp*Fs) * Rp**2/((2*pi*Lp*Fs)**2 + Rp**2)}

*********  helper functions for Z2 eval (ie secondary impedance bring back to primary) 
* Z = R1 + Z2 // Zp  -> Z2 = Zp*(R1-Z)/(Z-(Zp+R1))
.func DenumZ2(Rp,Xp,R,X,R1)={(R-Rp-R1)**2 + (X-Xp)**2}
.func ReZ2(Rp,Xp,R,X,R1)={((Rp*R1-Rp*R-Xp*X)*(R-Rp-R1) + (Rp*X+R1*Xp-R*Xp)*(Xp-X))/DenumZ2(Rp,Xp,R,X,R1)}
.func ImZ2(Rp,Xp,R,X,R1)={((Rp*R1-Rp*R-Xp*X)*(X-Xp) + (Rp*X+R1*Xp-R*Xp)*(R-Rp-R1))/DenumZ2(Rp,Xp,R,X,R1)}

**** Warning Rp Lp must be Re(Zp) and Im(Zp) Zp=Rp//Lp
.func Eval_R2(Rp,Lp,ModZ,ArgZ,R1,Fs)={ReZ2(ReZp(Rp,Lp,Fs),ImZp(Rp,Lp,Fs),ModZ*cos(ArgZ),ModZ*sin(ArgZ),R1)}
.func Eval_L2(Rp,Lp,ModZ,ArgZ,R1,Fs)={ImZ2(ReZp(Rp,Lp,Fs),ImZp(Rp,Lp,Fs),ModZ*cos(ArgZ),ModZ*sin(ArgZ),R1)/(2*pi*Fs)}


* expression for V1 = Zeq * I2 = (Z1*Z2/Zp + Z1 + Z2) * I2 
*|Zeq| = |Z1*Z2/Zp + Z1 + Z2|

***** Warning Rp Lp must be Re(Zp) and Im(Zp) Zp=Rp//Lp
.func ModZeq(R2,X2,Rp,Xp,R1)={ModSum3(ReMul3(R1,0,R2,X2,ReInv(Rp,Xp),ImInv(Rp,Xp)),ImMul3(R1,0,R2,X2,ReInv(Rp,Xp),ImInv(Rp,Xp)),R1,0,R2,X2)}
.func eval_V1(R2,L2,Rp,Lp,R1,Fs,I2)={ModZeq(R2,2*pi*Fs*L2,ReZp(Rp,Lp,Fs),ImZp(Rp,Lp,Fs),R1)*I2}
